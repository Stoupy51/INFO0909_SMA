# Imports
import json
import stouputils as stp
from config import *
from autogen_core import MessageContext, BaseAgent
import random
from src.reputation import Reputation
import pandas as pd

# Class
class AgentRandom(BaseAgent):
    def __init__(self) -> None:
        super().__init__(self.__class__.__name__)
        self.msg: Message = Message(origin=self.__class__.__name__)
        self.reputation: Reputation = Reputation()
        
        # Load dataset for reputation initialization
        data: pd.DataFrame = pd.read_csv(DATASET)
        data["generated"] = data["generated"].astype(int)
        data = data.head(100)  # Only keep first 100 rows
        
        # Initialize reputation with this data
        stp.info("Initializing Random Agent reputation...")
        for _, row in data.iterrows():
            true_class = "ai" if row[1] == 1 else "human"
            predicted_class = random.choice(["human", "ai"])
            self.reputation.update(predicted_class == true_class)
        
        stp.info(f"Random Agent initial reputation (beta): {self.reputation.get_beta()}")

    async def on_message_impl(self, message: Message, ctx: MessageContext) -> None:
        """ Receive a message and send randomly 1 if content is generated by AI, else 0 """
        stp.info(f"AgentRandom: Received message from {message.origin}")

        # Prepare data for the model
        content: str = str(message.content)
        data: dict = json.loads(message.data)
        vote: str = data.get("request")

        if vote == "majoritaire":
            decision: int = random.choice([1, 0])
            self.msg.content = str(decision)
 
        elif vote == "borda":
            liste_candidats: list[str] = ["ai", "human"]
            random.shuffle(liste_candidats)
            nb_points: int = len(liste_candidats)
            text: str = ""
            for candidat in liste_candidats:
                text += candidat + " " + str(nb_points) + ","
                nb_points -= 1
            self.msg.content = text
            
        elif vote == "paxos":
            phase = data.get("phase")
            
            # Phase 1: Make a random proposal with random confidence
            if phase == "propose":
                # Randomly choose a class with a random confidence level
                predicted_class = random.choice(["human", "ai"])
                confidence = random.uniform(0.5, 1.0)  # Random confidence between 0.5 and 1.0
                
                # Send proposal with confidence
                self.msg.content = json.dumps({
                    "class": predicted_class,
                    "confidence": confidence,
                    "beta": self.reputation.get_beta()
                })
            
            # Phase 2: Vote for a candidate
            elif phase == "vote":
                # Get candidates and vote randomly for one
                candidates = data.get("candidates", {})
                if candidates:
                    # Random voting strategy
                    voted_for = random.choice(list(candidates.keys()))
                    self.msg.content = json.dumps({"voted_for": voted_for})

        # Send back
        await self.send_message(self.msg, ctx.sender)    # type: ignore
        

